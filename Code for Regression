% Perform linear regression for ERA
model_ERA = fitlm(ERA', WinPercentage);
R2_ERA = model_ERA.Rsquared.Ordinary;
disp(['R^2 Value for ERA: ', num2str(R2_ERA)]);

% Perform linear regression for batting average
model_BattingAverage = fitlm(BattingAverage', WinPercentage);
R2_BattingAverage = model_BattingAverage.Rsquared.Ordinary;
disp(['R^2 Value for Batting Average: ', num2str(R2_BattingAverage)]);

% Perform linear regression for fielding percentage
model_FieldingPercentage = fitlm(FieldingPercentage', WinPercentage); %fits linear regression
R2_FieldingPercentage = model_FieldingPercentage.Rsquared.Ordinary;
disp(['R^2 Value for Fielding Percentage: ', num2str(R2_FieldingPercentage)]);

%Perform linear regression for LOBPercentage
model_LOBPercentage = fitlm(LOBPercentage', WinPercentage);
R2_LOBPercentage = model_LOBPercentage.Rsquared.Ordinary;
disp([R^2 Value for Left On Base Percentage: ', num2str(R2_LOBPercentage)];

%Perform linear regression for home runs
model_HR = fitlm(HR', WinPercentage);
R2_HR = model_HR.Rsquared.Ordinary;
disp([R^2 Value for Home Runs: ', num2str(R2_HR)];



% Define predictor variables and response variable
predictorVariables = [x1, x2, ...]; % Replace with ERA, batting average
responseVariable = [winpercentage]; % winpercentage

% Fit linear regression model
model = fitlm(predictorVariables, responseVariable);

% Extract R^2 values for each predictor variable
R2Values = mdl.Rsquared.Ordinary;

% Display table of variables and their R^2 values
variableNames = {'Variable 1', 'Variable 2', ...}; % Replace with your variable names
Table_Correlation_Wins = table(variableNames', R2Values', 'VariableNames', {'Variable', 'R2Value'});
disp(Table_Correlation);

% Extract variables with R^2 value of 0.5 or higher
selectedVariables = predictorVariables(:, R2Values >= 0.5);
