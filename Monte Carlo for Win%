%Jack's Code: Final version for Monte Carlo
%%%I forgot to trac my hours with the pish but i can provide them here
%4.5 hours on montecarlo research on how to implement it on matlab
%5 hours on the first version of montecarlo using the correlation question we found from linear regression (ended up scrapping because beyond_pythgorean expectation was superior with predictions)
%6.5 hours on the final version of Montecarlo betweeen code implmenetation, debugging the outer loop to run simulated seasons given the stats of the yankees
%1.5 hours on finding montecarlo strategies to lower variation in the results.
%3.5 hours doing data minipulatoin for the csv files onto excel to use for linear regression and montecarlo whether cleaning up the data, making new columns to use, or deleting skewed seaosn like 2020
%3 hours making the linear regression model dynamic for any sized table from a given csv, also so we didn't have to individually calculate each R and R^2 value for every stat.
%30 minutes writing the full and comprehensive README.md  
%1.5 hours researching win chance equations and found Beyond_Pythagorean_expectation

fangraph_data = readtable('/Users/johnkelly/Downloads/DataforMonte.csv');
% Extract the names of all the columns (variables) in the table
stat_names = fangraph_data.Properties.VariableNames(3:end);
yankees_data = fangraph_data(fangraph_data.Team == "NYY", :);
% Compute the mlb mean vlaues for stats
mean_slg = mean(fangraph_data.B_SLG);
mean_b_R = mean(fangraph_data.RSPG);
mean_p_R = mean(fangraph_data.RAPG);
% Compute the mlb standard deviation  for stats
std_slg = std(fangraph_data.B_SLG);
std_b_R = std(fangraph_data.RSPG);
std_p_R = std(fangraph_data.RAPG);


% Define parameters
control_variate_MC(5, 5, 0.430, 0.430, 10, 1000, mean_slg, std_slg, mean_b_R, std_b_R, mean_p_R, std_p_R)
function [mean_predicted_win_percentage, std_dev_predicted_win_percentage, total_yankees_wins] = control_variate_MC(b_r, p_r, b_slg, p_slg, total_games_played, num_simulations, mean_slg, std_slg, mean_b_R, std_b_R, mean_p_R, std_p_R)
   %%%MONTE CARLO function
   %{%%inputs
   % yankees runs scored
   %  yankees runs given up 
   % yankees slg
   % yankee slg they give up
   % mean and std of the leagues values above
   % number of simultions
   % function simulations remaining games in season yankees go up against
   % teams with randomly picked stats based on mean and std of the mlb
   %counts the total wins and the win percentage for that season
   %runs however many simulated seasons you input
   %%%OUTPUTS means win percentage and std of that win percentage
   % }%

% Calculate remaining games
    remaining_games = 162 - total_games_played;

    % Initialize array to store simulated win percentages
    simulated_win_percentages = zeros(num_simulations, 1);
    
    total_yankees_wins = 0; % Initialize total wins variable
    
    for sim = 1:num_simulations
        yankees_wins = 0; % Initialize wins variable for each season simulation
        
        for game = 1:remaining_games
            % Generate random variables for the opposing team
            random_slg1 = normrnd(mean_slg, std_slg);
            random_slg2 = normrnd(mean_slg, std_slg);
            random_rspg = normrnd(mean_b_R, std_b_R);
            random_rapg = normrnd(mean_p_R, std_p_R);

            % Calculate Yankees' alpha and beta parameters
            Y_alpha = 0.723 * ((b_r / total_games_played) + (p_r / total_games_played))^0.373;
            Y_beta = 0.977 * ((b_r / total_games_played) + (p_r / total_games_played))^-0.947;
            r_alpha = 0.723 * ((random_rspg) + (random_rapg))^0.373;
            r_beta = 0.977 * ((random_rspg) + (random_rapg))^-0.947;

            % Calculate win chance for the Yankees and the opposing team
            Yankees = ((b_r / total_games_played) / (p_r / total_games_played))^Y_alpha * ((b_slg / p_slg)^Y_beta);
            Competition = (random_slg1 / random_slg2)^r_beta * (random_rspg / random_rapg)^r_alpha;

            % Update win count if Yankees win
            if Yankees > Competition
                yankees_wins = yankees_wins + 1;
            end
        end
        
        % Accumulate total wins for that simulated season
        total_yankees_wins = total_yankees_wins + yankees_wins;
        
        % Store results for this simulation
        simulated_win_percentages(sim) = yankees_wins / remaining_games;
    end
    
    % Compute mean and standard deviation of simulated win percentages
    mean_predicted_win_percentage = mean(simulated_win_percentages);
    std_dev_predicted_win_percentage = std(simulated_win_percentages);
    disp(['Mean Predicted Win Percentage: ', num2str(mean_predicted_win_percentage)]);
    disp(['Standard Deviation Win Percentage ', num2str(std_dev_predicted_win_percentage)]);
end
