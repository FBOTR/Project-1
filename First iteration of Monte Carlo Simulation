%Chris and Jack's version of Monte Carlo Simulation: needed to fix this version because the standard deviation was too high
%example, gave us a win percentage of 0.50 with std of 0.2... not really helpful
%extract data
fangraph_data = readtable("Data_AllTeams_2002_2022.csv");
% Extract the names of all the columns (variables) in the table
stat_names = fangraph_data.Properties.VariableNames(3:end);
% Perform linear regression, calculate R^2 values, and compute correlation coefficients for each predictor variable
for i = 1:numel(stat_names)
%check if variable is numeric
    if isnumeric(fangraph_data.(stat_names{i}))
    % Normalize the predictor variable
    normalized_predictor = (fangraph_data.(stat_names{i}) - min(fangraph_data.(stat_names{i}))) / (max(fangraph_data.(stat_names{i})) - min(fangraph_data.(stat_names{i})));
    
    % Linear regression with normalized predictor for all teams
    model_all = fitlm(normalized_predictor, fangraph_data.Win_);
 % Filter data for Yankees
    yankees_data = fangraph_data(fangraph_data.Team == "NYY", :);
    normalized_predictor_for_yankees = (yankees_data.(stat_names{i}) - min(yankees_data.(stat_names{i}))) / (max(yankees_data.(stat_names{i})) - min(yankees_data.(stat_names{i})));
    
    % Linear regression with normalized predictor for Yankees
    model_yankees = fitlm((yankees_data.(stat_names{i}) - min(yankees_data.(stat_names{i}))) / (max(yankees_data.(stat_names{i})) - min(yankees_data.(stat_names{i}))), yankees_data.Win_);
    else
        disp(['Variable "', stat_names{i}, '" is not numeric, variable skipped.']);
    end
end

y_coefficients = model_yankees.Coefficients.Estimate;
yank_intercept = y_coefficients(1);
y_slope = y_coefficients(2);

% Define parameters
num_simulations = 5000;  % Number of simulations

% Initialize array to store simulated win percentages
simulated_win_percentages = zeros(num_simulations, 1);

% Extract the predictor variable used in the linear regression model for the Yankees
predictor_variable = yankees_data.(stat_names{i});  % Replace 'i' with the index of the desired predictor variable

% Perform simulation
for sim = 1:num_simulations
    % Generate a random predictor variable value
    random_predictor_value = rand();  % Generate a single random value between 0 and 1
    
    % Normalize the random predictor variable value
    normalized_random_predictor = (random_predictor_value - min(predictor_variable)) / (max(predictor_variable) - min(predictor_variable));
    
    % Predict win percentage using linear regression equation for Yankees
    predicted_win_percentage = yank_intercept + y_slope * normalized_random_predictor;
    
    % Store predicted win percentage
    simulated_win_percentages(sim) = predicted_win_percentage;
end

% Analyze the results
mean_predicted_win_percentage = mean(simulated_win_percentages);
std_dev_predicted_win_percentage = std(simulated_win_percentages);
% Display the mean predicted win percentage
disp(['The mean predicted win percentage is: ', num2str(mean_predicted_win_percentage)]);
disp(['The SD for predicted win percentage is: ', num2str(std_dev_predicted_win_percentage)]);
