%Chris and Jack
% Load the data from the CSV file into a table
fangraph_data = readtable('/Users/johnkelly/Downloads/updated_data_all_teams.csv');

% Extract the names of all the columns (variables) in the table
stat_names = fangraph_data.Properties.VariableNames(3:end);

% Initialize arrays to store R^2 values and correlation coefficients
R2Values_all = zeros(numel(stat_names), 1); % Initial R^2 values array for all teams
R2Values_yankees = zeros(numel(stat_names), 1); % Initial R^2 values array for Yankees
correlation_with_win_all = zeros(numel(stat_names), 1); % Initial correlation coefficients array for all teams
correlation_with_win_yankees = zeros(numel(stat_names), 1); % Initial correlation coefficients array for Yankees

% Initialize arrays to store filtered values as cell arrays of strings
R2_all_greater_than_05 = {};
R2_all_less_than_neg_05 = {};
R2_yankees_greater_than_05 = {};
R2_yankees_less_than_neg_05 = {};
Corr_greater_than_05 = {};
Corr_less_than_neg_05 = {};
yankees_Corr_greater_than_05 = {};
yankees_Corr_less_than_neg_05 = {};

% Perform linear regression, calculate R^2 values, and compute correlation coefficients for each predictor variable
for i = 1:numel(stat_names)
%check if variable is numeric
    if isnumeric(fangraph_data.(stat_names{i}))
    % Normalize the predictor variable
    normalized_predictor = (fangraph_data.(stat_names{i}) - min(fangraph_data.(stat_names{i}))) / (max(fangraph_data.(stat_names{i})) - min(fangraph_data.(stat_names{i})));
    
    % Linear regression with normalized predictor for all teams
    model_all = fitlm(normalized_predictor, fangraph_data.Win_);
    
    % Store R^2 value for all teams
    R2Values_all(i) = model_all.Rsquared.Ordinary;
    
    % Compute correlation coefficient with win percentage for all teams
    correlation_with_win_all(i) = corr(fangraph_data.Win_, fangraph_data.(stat_names{i}));
    
    % Filter data for Yankees
    yankees_data = fangraph_data(fangraph_data.Team == "NYY", :);
    normalized_predictor_for_yankees = (yankees_data.(stat_names{i}) - min(yankees_data.(stat_names{i}))) / (max(yankees_data.(stat_names{i})) - min(yankees_data.(stat_names{i})));

    % Linear regression with normalized predictor for Yankees
    model_yankees = fitlm((yankees_data.(stat_names{i}) - min(yankees_data.(stat_names{i}))) / (max(yankees_data.(stat_names{i})) - min(yankees_data.(stat_names{i}))), yankees_data.Win_);
    
    % Store R^2 value for Yankees
    R2Values_yankees(i) = model_yankees.Rsquared.Ordinary;
    
    % Compute correlation coefficient with win percentage for Yankees
    correlation_with_win_yankees(i) = corr(yankees_data.Win_, yankees_data.(stat_names{i}));
    
    % Display R^2 value and correlation coefficient for all teams
    disp(['All Teams - R^2 Value for ', stat_names{i}, ': ', num2str(R2Values_all(i)), ', Correlation with win percentage: ', num2str(correlation_with_win_all(i))]);
    
    % Display R^2 value and correlation coefficient for Yankees
    disp(['Yankees - R^2 Value for ', stat_names{i}, ': ', num2str(R2Values_yankees(i)), ', Correlation with win percentage: ', num2str(correlation_with_win_yankees(i))]);
    
    % Check if R2 values greater than 0.5 or less than -0.5
     if R2Values_all(i) >= 0.5
         R2_all_greater_than_05 = [R2_all_greater_than_05; stat_names{i}];
     elseif R2Values_all(i) <= -0.5
        R2_all_less_than_neg_05 = [R2_all_less_than_neg_05; stat_names{i}];
     end
        
     % Check Yankees
     if R2Values_yankees(i) >= 0.5
          R2_yankees_greater_than_05 = [R2_yankees_greater_than_05; stat_names{i}];
     elseif R2Values_yankees(i) <= -0.5
          R2_yankees_less_than_neg_05 = [R2_yankees_less_than_neg_05; stat_names{i}];
     end

     % Repeat with correlation values:
     if correlation_with_win_all(i) >= 0.5
          Corr_greater_than_05 = [Corr_greater_than_05; stat_names{i}];
     elseif correlation_with_win_all(i) <= -0.5
          Corr_less_than_neg_05 = [Corr_less_than_neg_05; stat_names{i}];
     end
        
     % Check if the correlation coefficient meets the threshold for Yankees
     if correlation_with_win_yankees(i) >= 0.5
          yankees_Corr_greater_than_05 = [yankees_Corr_greater_than_05; stat_names{i}];
     elseif correlation_with_win_yankees(i) <= -0.5
          yankees_Corr_less_than_neg_05 = [yankees_Corr_less_than_neg_05; stat_names{i}];
     end
    else
        disp(['Variable "', stat_names{i}, '" is not numeric, variable skipped.']);
    end
end

%Chris's Code
% Create tables of predictor variable names, their R^2 values, and correlation coefficients for all teams and Yankees
table_all = table(stat_names', R2Values_all, correlation_with_win_all, 'VariableNames', {'Variable', 'R2Value_All', 'CorrelationWithWin_All'});
table_yankees = table(stat_names', R2Values_yankees, correlation_with_win_yankees, 'VariableNames', {'Variable', 'R2Value_Yankees', 'CorrelationWithWin_Yankees'});
% Sort by correlation coefficient with win percentage from least to greatest
table_all = sortrows(table_all, 'CorrelationWithWin_All', 'descend');

% Display the tables
disp("Results for all teams:");
disp(table_all);
disp("Results for the Yankees:");
disp(table_yankees);
% Sort the table for Yankees by R^2 value from greatest to least
table_yankees_sorted = sortrows(table_yankees, 'R2Value_Yankees', 'descend');
%{
% Display the arrays
disp("All R2 values greater than or equal to 0.5:");
disp(R2_all_greater_than_05);
disp("All R2 values less than or equal to -0.5:");
disp(R2_all_less_than_neg_05);
disp("Yankees R2 values greater than or equal to 0.5:");
disp(R2_yankees_greater_than_05);
disp("Yankees R2 values less than or equal to -0.5:");
disp(R2_yankees_less_than_neg_05);

disp("All correlation values greater than or equal to 0.5:");
disp(Corr_greater_than_05);
disp("All correlation values less than or equal to -0.5:");
disp(Corr_less_than_neg_05);
disp("Yankees correlation values greater than or equal to 0.5:");
disp(yankees_Corr_greater_than_05);
disp("Yankees correlation values less than or equal to -0.5:");
disp(yankees_Corr_less_than_neg_05);
%}
%Jack's Code
% Find the indices of variables "W", "L", and "Win_"
indices_to_exclude = ismember(stat_names, {'W', 'L', 'Win_'});

% Exclude the variables from the lists
R2_all_greater_than_05 = setdiff(R2_all_greater_than_05, stat_names(indices_to_exclude));
R2_all_less_than_neg_05 = setdiff(R2_all_less_than_neg_05, stat_names(indices_to_exclude));
R2_yankees_greater_than_05 = setdiff(R2_yankees_greater_than_05, stat_names(indices_to_exclude));
R2_yankees_less_than_neg_05 = setdiff(R2_yankees_less_than_neg_05, stat_names(indices_to_exclude));

Corr_greater_than_05 = setdiff(Corr_greater_than_05, stat_names(indices_to_exclude));
Corr_less_than_neg_05 = setdiff(Corr_less_than_neg_05, stat_names(indices_to_exclude));
yankees_Corr_greater_than_05 = setdiff(yankees_Corr_greater_than_05, stat_names(indices_to_exclude));
yankees_Corr_less_than_neg_05 = setdiff(yankees_Corr_less_than_neg_05, stat_names(indices_to_exclude));

%{
 Display the modified lists excluding w, l win_
disp("All R2 values greater than or equal to 0.5 (excluding W, L, and Win_):");
disp(R2_all_greater_than_05);
disp("All R2 values less than or equal to -0.5 (excluding W, L, and Win_):");
disp(R2_all_less_than_neg_05);
disp("Yankees R2 values greater than or equal to 0.5 (excluding W, L, and Win_):");
disp(R2_yankees_greater_than_05);
disp("Yankees R2 values less than or equal to -0.5 (excluding W, L, and Win_):");
disp(R2_yankees_less_than_neg_05);

disp("All correlation values greater than or equal to 0.5 (excluding W, L, and Win_):");
disp(Corr_greater_than_05);
disp("All correlation values less than or equal to -0.5 (excluding W, L, and Win_):");
disp(Corr_less_than_neg_05);
disp("Yankees correlation values greater than or equal to 0.5 (excluding W, L, and Win_):");
disp(yankees_Corr_greater_than_05);
disp("Yankees correlation values less than or equal to -0.5 (excluding W, L, and Win_):");
disp(yankees_Corr_less_than_neg_05);
%}

%%%MAKING Final tables tables of values that are heavily correlated for
%%%yankees and league

% Concatenate yankees_Corr_greater_than_05 and yankees_Corr_less_than_neg_05
yankees_corr_variables = [yankees_Corr_greater_than_05; yankees_Corr_less_than_neg_05];

% Find the corresponding R coefficients and R^2 values for yankees_corr_variables
yankees_corr_r_values = zeros(size(yankees_corr_variables));
yankees_corr_r2_values = zeros(size(yankees_corr_variables));
for i = 1:numel(yankees_corr_variables)
    idx = find(strcmp(stat_names, yankees_corr_variables{i}));
    yankees_corr_r_values(i) = correlation_with_win_yankees(idx);
    yankees_corr_r2_values(i) = R2Values_yankees(idx);
end

% Create a table for Yankees correlation variables
yankees_corr_table = table(yankees_corr_variables, yankees_corr_r_values, yankees_corr_r2_values, ...
    'VariableNames', {'Variable', 'CorrelationCoefficient', 'R2Value'});
yankees_corr_table = sortrows(yankees_corr_table, 'R2Value', 'descend');

% Concatenate Corr_greater_than_05 and Corr_less_than_neg_05
all_corr_variables = [Corr_greater_than_05; Corr_less_than_neg_05];

% Find the corresponding R coefficients and R^2 values for all_corr_variables
all_corr_r_values = zeros(size(all_corr_variables));
all_corr_r2_values = zeros(size(all_corr_variables));
for i = 1:numel(all_corr_variables)
    idx = find(strcmp(stat_names, all_corr_variables{i}));
    all_corr_r_values(i) = correlation_with_win_all(idx);
    all_corr_r2_values(i) = R2Values_all(idx);
end

%Chris's Code
% Create a table for all teams correlation variables
all_corr_table = table(all_corr_variables, all_corr_r_values, all_corr_r2_values, ...
    'VariableNames', {'Variable', 'CorrelationCoefficient', 'R2Value'});
all_corr_table = sortrows(all_corr_table, 'R2Value', 'descend');

%estimate the coefficients for each linear regression model
coefficients = model_all.Coefficients.Estimate;
% Extract the intercept and slope
intercept = coefficients(1);
slope = coefficients(2);
y_coefficients = model_yankees.Coefficients.Estimate;
yank_intercept = y_coefficients(1);
y_slope = y_coefficients(2);

% Display the tables
disp("Final table for Yankees correlation variables:");
disp(yankees_corr_table);
disp("Final table for all teams correlation variables:");
disp(all_corr_table);
disp(['Equation: Win Percentage = ', num2str(intercept), ' + ', num2str(slope), ' * Normalized Predictor for all teams'])
disp(['Equation: Win Percentage = ', num2str(yank_intercept), ' + ', num2str(y_slope), ' * Normalized Predictor for Yankees'])

%Finn's Code: 
fileName='BaseballStatsYankees.xlsx';
fileNametemplate = 'BaseballStatsYankees_template.xlsx'

copyfile(fileNametemplate, fileName)
writetable(yankees_corr_table,fileName)
macopen(fileName)

fileName2='BaseballStatsAll.xlsx';

copyfile(fileNametemplate, fileName2)
writetable(all_corr_table,fileName2)
macopen(fileName2)


